#! /usr/bin/env pdo-shell

## Copyright 2018 Intel Corporation
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

## paths
set --conditional -s data -v .
set --conditional -s save -v .
set --conditional -s test_data -v ${data}

set --conditional -s _contracts_ -v ${home}/contracts
set --conditional -s _plugins_ -v ${_contracts_}/plugins

## load the eservice and pservice groups and databases for the site
script -f ${home}/etc/site.psh

## some definitions to make it easier to display text
set -s ENDC   -v "\033[0m"
set -s BOLD   -v '\033[1m'
set -s HEADER -v "\033[95m"
set -s ERROR  -v "\033[91m"
set -s WARN   -v "\033[93m"
set -s INFO   -v "\033[92m"

## make sure we are running with CCF
set -s _ledger_type_ --state Ledger LedgerType
if --not -e "${_ledger_type_}" "ccf"
   echo ${ERROR} This test requires the CCF ledger ${ENDC}
   exit -v 0
fi

## load the command plugin for attestation test
load_plugin -f ${_plugins_}/attestation-test.py

## =================================================================
ledger -s _ledger_key_ ledger-key

## =================================================================
echo ${INFO} create attestation contracts ${ENDC}
## =================================================================
identity -n user1
create -c attestation-type -s _attestation-test -f ${save}/contract1.pdo
attestation -f ${save}/contract1.pdo initialize --ledger-key "${_ledger_key_}"
attestation -f ${save}/contract1.pdo get_contract_metadata -s _md1_
attestation -f ${save}/contract1.pdo get_contract_code_metadata -s _mdc1_
contract -s _id1_ -f ${save}/contract1.pdo contract-id
ledger -s _info1_ contract-info -i ${_id1_}
echo ${HEADER} contract metadata for contract 1: ${ENDC}
echo ${_md1_}

identity -n user2
create -c attestation-type -s _attestation-test -f ${save}/contract2.pdo
attestation -f ${save}/contract2.pdo initialize --ledger-key "${_ledger_key_}"
attestation -f ${save}/contract2.pdo get_contract_metadata -s _md2_
attestation -f ${save}/contract2.pdo get_contract_code_metadata -s _mdc2_
contract -s _id2_ -f ${save}/contract2.pdo contract-id
ledger -s _info2_ contract-info -i "${_id2_}"
echo ${HEADER} contract metadata for contract 2: ${ENDC}
echo ${_md2_}

## =================================================================
echo ${INFO} add an endpoint for contract 1 to contract 2 ${ENDC}

identity -n user1
attestation -f ${save}/contract2.pdo add_endpoint -i ${_id1_} -c "${_mdc1_}" -m "${_md1_}" -l "${_info1_}"

## =================================================================
echo ${INFO} add an endpoint for contract 2 to contract 1 ${ENDC}

identity -n user2
attestation -f ${save}/contract1.pdo add_endpoint -i ${_id2_} -c "${_mdc2_}" -m "${_md2_}" -l "${_info2_}"

## =================================================================
echo ${INFO} create a secret and share it with the other contracts ${ENDC}
identity -n user1
attestation -w -f ${save}/contract1.pdo send_secret -i ${_id2_} -s _secret_
attestation -w -f ${save}/contract2.pdo recv_secret --secret "${_secret_}"

identity -n user1
ledger -s _sig1_ current-state -i ${_id1_} -p signature
attestation -f ${save}/contract1.pdo reveal_secret -s _secret1_ -a ${_sig1_}
##echo ${HEADER} secret stored in contract 1 is ${_secret1_} ${ENDC}

identity -n user2
ledger -s _sig2_ current-state -i ${_id2_} -p signature
attestation -f ${save}/contract2.pdo reveal_secret -s _secret2_ -a ${_sig2_}
##echo ${HEADER} secret stored in contract 2 is ${_secret2_} ${ENDC}

if --not -e ${_secret1_} ${_secret2_}
   echo Secrets did not match
   exit -v 1
fi

echo ${HEADER} secrets matched ${ENDC}

## =================================================================
echo ${INFO} test sgx report verification ${ENDC}
identity -n user1

set -s _report_ -f ${test_data}/report.json
set -s _certificate_ -f ${test_data}/certificate.pem
set -s _signature_ -f ${test_data}/signature.txt
set -s _bad_signature_ -f ${test_data}/bad_signature.txt

attestation -f ${save}/contract1.pdo verify_sgx_report -s _r_ -c ${_certificate_} -r ${_report_} -i ${_signature_}
if -e ${_r_} false
   echo failed to verify SGX report
   exit -v 1
fi

echo ${INFO} ${_r_} ${ENDC}

trap_error

attestation -f ${save}/contract1.pdo verify_sgx_report -s _r_ -c ${_certificate_} -r ${_report_} -i ${_bad_signature_}
if -e ${_error_code_} 0
   echo failed to identify invalid SGX signature
   exit -v -1
fi

attestation -f ${save}/contract1.pdo verify_sgx_report -s _r_ -c ${_certificate_} -r "badreport" -i ${_signature_}
if -e ${_error_code_} 0
   echo failed to identify invalid SGX signature
   exit -v -1
fi

untrap_error
