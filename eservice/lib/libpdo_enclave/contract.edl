/* Copyright 2018 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

enclave {
    include "sgx_trts.h"
    include "sgx_tseal.h"
    include "sgx_tcrypto.h"

    trusted {
        //
        public pdo_err_t ecall_CreateContractWorker(
            size_t inThreadId
        );

        //
        public pdo_err_t ecall_ShutdownContractWorker();

	//
        public pdo_err_t ecall_CalculateSealedContractKeySize(
	    size_t contractIdSize,
            [out] size_t* pSealedContractKeySize
            );

        //
        public pdo_err_t ecall_VerifySecrets(
            [in, size=inSealedSignupDataSize] const uint8_t* inSealedSignupData,
            size_t inSealedSignupDataSize,
            [in, string] const char* inContractId,
            [in, string] const char* inContractCreatorId,
            [in, string] const char* inSerializedSecretList,
            [out, size=inEncryptedContractKeyLength] uint8_t* outEncryptedContractKey,
            size_t inEncryptedContractKeyLength,
            [out, size=inEncryptedContractKeySignatureLength] uint8_t* outEncryptedContractKeySignature,
            size_t inEncryptedContractKeySignatureLength
            );

        // inEncryptedSessionKey is binary encoding of the encrypted session key
        // inSerializedRequest is binary encoding of the encrypted request
        // outSerializedResponseSize is the computed size of the response
        public pdo_err_t ecall_HandleContractRequest(
            [in, size=inSealedSignupDataSize] const uint8_t* inSealedSignupData,
            size_t inSealedSignupDataSize,
            [in, size=inEncryptedSessionKeySize] const uint8_t* inEncryptedSessionKey,
            size_t inEncryptedSessionKeySize,
            [in, size=inSerializedRequestSize] const uint8_t* inSerializedRequest,
            size_t inSerializedRequestSize,
            [out] size_t* outSerializedResponseSize
            );

        // outSerializedResponse is a base64 encoding of a JSON object encrypted with the AES session key
        public pdo_err_t ecall_GetSerializedResponse(
            [in, size=inSealedSignupDataSize] const uint8_t* inSealedSignupData,
            size_t inSealedSignupDataSize,
            [out, size = inSerializedResponseSize] uint8_t* outSerializedResponse,
            size_t inSerializedResponseSize
            );
    };

    untrusted {
    };

};
