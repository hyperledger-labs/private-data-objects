{
    "$schema": "http://json-schema.org/schema#",
    "title": "Private Contract Requests",
    "id": "http://tradenet.org/pcontract/basetypes",
    "definitions": {
        "ecdsa-public-key": {
            "id": "#ecdsa-public-key",
            "description": "an ECDSA public key from the SECP256k1 curve",
            "type": "string",
            "minLength": 22,
            "maxLength": 22,
            "format": "PEM format"
        },
        "rsa-public-key": {
            "id": "#rsa-public-key",
            "description": "a 2048-bit RSA public key",
            "type": "string",
            "minLength": 22,
            "maxLength": 22,
            "format": "PEM format"
        },
        "contract-id": {
            "id": "#contract-id",
            "description": "the identifier for a contract",
            "type": "string",
            "minLength": 22,
            "maxLength": 22,
            "format": "base64, urlsafe encoded 64 byte array"
        },
        "transactorid": {
            "id": "#transactorid",
            "description": "the identifier for a user, for now this is equivalent to an ECDSA public key",
            "$ref": "#ecdsa-public-key"
        },
        "state-encryption-key": {
            "id": "#state-encryption-key",
            "description": "an AES key encrypted with the enclaves private key, used by an enclave to protect the state of a contract",
            "type": "string",
            "minLength": 22,
            "maxLength": 22,
            "format": "base64 urlsafe encoded, no padding"
        },
        "contract-secret": {
            "id": "#contract-secret",
            "description": "the concatenation of a 32 byte secret and a hex encoded 64 byte signature, encrypted with the enclave's RSA key",
            "type": "string",
            "minLength": 22,
            "maxLength": 22,
            "format": "base64 urlsafe encoded, no padding"
        },
        "signature": {
            "id": "#signature",
            "description": "an encoded signature generated by an ECDSA key",
            "type": "string",
            "minLength": 22,
            "maxLength": 22,
            "format": "base64 url encoded ECDSA signature"
        },
        "s-expression": {
            "id": "#s-expression",
            "description": "a scheme expression",
            "type": "string",
            "maxLength": 65535,
            "format": "scheme s-expression"
        },
        "contract-code": {
            "id": "#contract",
            "description": "contract parameter, code and name of the contract",
            "type": "object",
            "properties": {
                "Code": {
                    "description": "the contract code",
                    "type": "string",
                    "maxLength": 65535,
                    "required": true
                },
                "Name": {
                    "description": "the name of the contract class in the code",
                    "type": "string",
                    "maxLength": 32,
                    "required": true
                }
            }
        },
        "contract-message": {
            "description": "serialized message object",
            "properties": {
                "Expression": {
                    "description": "the message to be sent to the contract",
                    "$ref": "#s-expression",
                    "required": true
                },
                "OriginatorVerifyingKey": {
                    "description": "identifier for the transactor requesting the method invocation",
                    "$ref": "#transactorid",
                    "required": true
                },
                "ChannelVerifyingKey": {
                    "description": "public key for the channel key pair",
                    "$ref": "#transactorid",
                    "required": true
                },
                "Nonce": {
                    "description": "random string to facilitate randomness in the message",
                    "type": "string",
                    "maxLength": 32,
                    "required": true
                },
                "Signature": {
                    "description": "signature over the expression",
                    "$ref": "#signature",
                    "required": true
                }
            }
        },
        "contract-state": {
            "description": "serialized state object",
            "properties": {
                "ContractID": {
                    "description": "unique identifier for the contract",
                    "$ref": "#contractid",
                    "required": true
                },
                "CreatorID": {
                    "description": "identifier for the creator of the contract",
                    "$ref": "#transactorid",
                    "required": true
                },
                "EncryptedStateEncryptionKey": {
                    "description": "the encrypted state encryption key created for use by an enclave for this contract instance",
                    "$ref": "#state-encryption-key",
                    "required": true
                },
                "EncryptedState": {
                    "description": "the encrypted state",
                    "type": "string",
                    "maxLength": 65535,
                    "format": "base64 urlsafe encoded, no padding",
                    "required": false
                }
            }
        }
    }
}