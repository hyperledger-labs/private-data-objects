// Copyright 2018 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "pdo.sawtooth.protobuf";

message PdoContractInfo {
    // The "register" transaction id (256 bits, base64 encoded)
    string contract_id = 1;

    // Contract SHA256 hash used by the enclaves to verify the contract.
    // It is set during "register" transaction and cannot be changed later
    string contract_code_hash = 3;

    // PDO signature generated by the enclave service
    string pdo_contract_creator_pem_key = 4;

    // Provisioning service ids below are set during "register" transaction
    // and cannot be changed later
    repeated string provisioning_service_ids = 5;

    // Provisioned enclaves info
    repeated PdoContractEnclavesInfo enclaves_info = 6;
}


message PdoContractTransaction {
    // The action that the transaction processor will take.
    // They are “register”, “revoke”, "add-enclaves", or "remove-enclaves"
    string verb = 1;

    // contract id
    string contract_id = 2;

    // Transaction details specific to the action. Refer below to
    // PdoContractRegister for "register" transaction
    // PdoContractAddEnclaves for "add-enclaves"
    // PdoContractRemoveEnclaves for "remove-enclaves"
    bytes transaction_details = 3;
}


message PdoContractRegister {
    // Contract SHA256 hash used by the enclaves to verify the contract.
    // It is set during "register" transaction and cannot be changed later
    string contract_code_hash = 1;

    // PDO signature generated by the enclave service
    string pdo_contract_creator_pem_key = 2;

    // PDO signature generated by the enclave service
    string pdo_signature = 3;

    // Provisioning service ids below are set during "register" transaction
    // and cannot be changed later
    repeated string provisioning_service_ids = 4;
}


message PdoContractAddEnclaves {
    string pdo_signature = 1;

    repeated PdoContractEnclavesInfo enclaves_info = 2;
}


message PdoContractEnclavesInfo {
    // It must match a corresponding verifying_key
    // in the contract enclave registry
    string contract_enclave_id = 1;

    // Encrypted key for the enclave to decrypt the contract state
    string encrypted_contract_state_encryption_key = 2;

    // Contract signature generated by the enclave
    string enclave_signature = 3;

    // PdoProvisioningKeyToStateSecretMap is defined below
    repeated PdoProvisioningKeyToStateSecretMap enclaves_map = 4;
}


message PdoProvisioningKeyToStateSecretMap {
    // Public key generated by the provisioning services
    string provisioning_service_public_key = 1;

    // An encrypted contract secret generated by the provisioning service
    string provisioning_contract_state_secret = 2;

    // Index defining the enclave info ordering for signing
    int32 index = 3;
}


message PdoContractRemoveEnclaves {
    // Ids of enclaves to remove
    repeated string contract_enclave_ids = 1;
}

