// Copyright 2018 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "pdo.sawtooth.protobuf";

message CCL_ContractStateUpdate
{
    // The identifier of the contract registration transaction
    string contract_id = 1;

    // The hash of the current state
    string current_state_hash = 2;

    // The hash of the previous state
    string previous_state_hash = 3;

    // The hash of the message that caused the update
    string message_hash = 4;

    // OPTIONAL: The actual encrypted state of the contract
    string encrypted_state = 5;

    // Dependencies are references to a specific instance
    // of state from another contract
    repeated CCL_ContractStateReference dependency_list = 6;
}

message CCL_ContractStateReference
{
    // The identifier of the contract registration transaction
    string contract_id = 1;

    // The hash of the current state
    string state_hash = 2;
}

message CCL_ContractState
{
    // The identifier for the transaction in which this state update was
    // committed
    string transaction_id = 1;

    // The details of the state update
    CCL_ContractStateUpdate state_update = 2;
}

message CCL_ContractInformation
{
    // The identifier of the contract registration transaction
    string contract_id = 1;

    // A reference to the most recently committed state of the contract
    CCL_ContractStateReference current_state = 2;

    // A flag to indicate that the contract is active
    bool is_active = 3;
}

message CCL_TransactionPayload {
    // The action that the transaction processor will take.
    string verb = 1;

    // ECDSA public key of the enclave, base64 encoded
    string contract_enclave_id = 2;

    // Signature from the contract enclave, base64 encoded
    string contract_enclave_signature = 3;

    // ECDSA public key for the channel
    string channel_id = 4;

    // This is all the details of the state update
    CCL_ContractStateUpdate state_update = 5;

    // PDO signature to be verified with contract creator key
    string pdo_signature = 6;
}
