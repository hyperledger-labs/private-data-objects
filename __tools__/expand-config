#!/usr/bin/env python

# Copyright 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Return the number of registered endpoints in the exit status
"""

import os
import toml
import re
from string import Template

## -----------------------------------------------------------------
ContractHost = os.environ.get("HOSTNAME", "localhost")
ContractHome = os.environ.get("PDO_HOME") or os.path.realpath("/opt/pdo")
ContractEtc = os.path.join(ContractHome, "etc")
ContractKeys = os.path.join(ContractHome, "keys")
ContractLogs = os.path.join(ContractHome, "logs")
ContractData = os.path.join(ContractHome, "data")
HttpsProxy = os.environ.get("https_proxy", "")

LedgerURL = os.environ.get("PDO_LEDGER_URL", "http://127.0.0.1:8008/")
SPID = os.environ.get("PDO_SPID",'DEADBEEF00000000DEADBEEF00000000')
SPID_CERT_FILE = os.environ.get("PDO_SPID_CERT_FILE",'/etc/sawtooth/ias_rk_pub.pem')

config_map = {
    'data' : ContractData,
    'etc'  : ContractEtc,
    'home' : ContractHome,
    'host' : ContractHost,
    'keys' : ContractKeys,
    'logs' : ContractLogs,
    'ledger' : LedgerURL,
    'proxy' : HttpsProxy,
    'spid' : SPID,
    'spid_cert_file' : SPID_CERT_FILE
}

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def parse_configuration_file(filename, variable_map) :
    """
    Parse a configuration file expanding variable references
    using the Python Template library (variables are $var format)

    :param string filename: name of the configuration file
    :param dict variable_map: dictionary of expansions to use
    :returns dict: dictionary of configuration information
    """

    cpattern = re.compile('##.*$')

    with open(filename) as fp :
        lines = fp.readlines()

    text = ""
    for line in lines :
        text += re.sub(cpattern, '', line) + ' '

    # try :
    #     if variable_map :
    #         text = Template(text).safe_substitute(variable_map)
    # except ValueError as ve :
    #     print('VALUEERROR: %s', ve)

    # except Exception as e :
    #     print('EXCEPTION: %s', e)

    if variable_map :
        text = Template(text).safe_substitute(variable_map)

    return toml.loads(text)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def expand_single(options) :
    filename = os.path.join(options.template_directory, options.template)
    config = parse_configuration_file(filename, config_map)

    filename = os.path.join(options.output_directory, options.file)
    with open(filename, 'w') as outfile:
        toml.dump(config, outfile)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def expand_multiple(options, node, httpport = 0) :
    node_map = config_map.copy()
    node_map['identity'] = node
    node_map['httpport'] = httpport

    filename = os.path.join(options.template_directory, options.template)
    config = parse_configuration_file(filename, node_map)

    filename = os.path.join(options.output_directory, node + '.toml')
    with open(filename, 'w') as outfile:
        toml.dump(config, outfile)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
import argparse

parser = argparse.ArgumentParser(description='Script to generate sawtooth configuration files from a template')

parser.add_argument('--template', help='Name of the base configuration file to use', default='template.js')
parser.add_argument('--template-directory', help='Directory in which the template configuration will be found', default='etc/templates')
parser.add_argument('--output-directory', help='Name of the directory where generated configuration files are written', default='etc')
parser.add_argument('--set', help='Specify arbitrary configuration options', nargs=2, action='append')

subparsers = parser.add_subparsers(dest='command')
expand_parser = subparsers.add_parser('single', help='expand a template into a single file')
expand_parser.add_argument('--file', help='Base for node names', required=True)

multi_parser = subparsers.add_parser('multiple', help='expand a template into multiple files')
multi_parser.add_argument('--file-base', help='Base for file names', required=True)
multi_parser.add_argument('--http-base', help='Base for http ports used for nodes', default=8800, type=int)
multi_parser.add_argument('--count', help='Number of validators to configure', default=9, type=int)

options = parser.parse_args()

if options.set :
    for (k, v) in options.set : config_map[k] = v

if options.command == 'multiple' :
    for n in range(1, int(options.count)+1) :
        node = options.file_base + str(n)
        httpport = options.http_base + n
        expand_multiple(options, node, httpport = httpport)

elif options.command == 'single' :
    expand_single(options)
