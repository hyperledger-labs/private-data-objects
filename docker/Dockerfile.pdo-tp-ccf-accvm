# Copyright 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# Description:
#   Build Container for PDO CCF Transaction Processor
#
# It is reccomneded that this dockerfile is use along with ccf-pdo.yaml docker-compose file. Stand alone run will fail,
# since there is an ENTYPOINT that tries to mount the key directory. But if this line is commented out, the following comamnds
# can be used to build and run pdo-tp-ccf using this dockerfile itself.
#
# Build:
#   $ docker build --build-arg -f Dockerfile.pdo-tp-ccf -t pdo-tp-ccf .
#
# Run:
#   $ docker run --expose 6600 -it pdo-tp-ccf
#
# A CCF instance will be availble for business transctions at http://host-ip:6600.
#
# If you are behind proxy, (and if building the image using this dockerfile rather than docker-compose),
# make sure that proxy settings are set in the host machine @ ~/.docker/config.json
# The settings from this file will be inherited by the container. See https://docs.docker.com/network/proxy/ for details.

# we start from ccf base container that comes preinstalled with ccf base and the depdencies for building the application
FROM ccfciteam/ccf-app-ci:0.11.7

#install a few extra utilities
RUN apt-get update && apt-get install -y python3-pip vim net-tools
RUN pip3 install virtualenv

ARG PDO_REPO_URL=https://github.com/hyperledger-labs/private-data-objects.git
ARG PDO_REPO_BRANCH=master

# This helps using the local git repo to test docker
RUN mkdir /tmp/build-src
COPY . /tmp/build-src

# get the pdo tp source code
RUN mkdir -p /pdo/dev
RUN cd /pdo \
	&& git clone --single-branch --branch ${PDO_REPO_BRANCH} --recurse-submodules ${PDO_REPO_URL} private-data-objects
WORKDIR /pdo/

# Env variables needed to build pdo-tp-ccf. Also generate the enclave signing key
RUN cd private-data-objects/ccf_transaction_processor/ \
	&& openssl genrsa -3 3072 > enclave.pem
ARG PDO_HOSTNAME
ENV PDO_HOSTNAME=${PDO_HOSTNAME}
ARG CCF_FIRST_NODE_IP
ENV CCF_FIRST_NODE_IP=${CCF_FIRST_NODE_IP}
ENV CCF_BASE=/opt/ccf-0.11.7/
ENV PDO_INSTALL_ROOT=/pdo/dev/
ENV PDO_SOURCE_ROOT=/pdo/private-data-objects/
ENV PDO_ENCLAVE_CODE_SIGN_PEM=/pdo/private-data-objects/ccf_transaction_processor/enclave.pem
ENV PDO_LEDGER_KEY_ROOT=/pdo/dev/opt/pdo/ccf/keys/
ARG SGX_MODE=SIM
ENV SGX_MODE=${SGX_MODE}
ENV PDO_HOME=/pdo/dev/opt/pdo/

# needed only for HW mode. the current azure dcap library gives an error if the variable is not set while computing quote
ARG AZDCAP_DEBUG_LOG_LEVEL=INFO
ENV AZDCAP_DEBUG_LOG_LEVEL=${AZDCAP_DEBUG_LOG_LEVEL}

# build pdo-tp
RUN if [ -z "$CCF_FIRST_NODE_IP" ] ; \
	then `/pdo/private-data-objects/build/common-config.sh -e` \
		&& cd private-data-objects/ccf_transaction_processor/ \
		&& make ; \
	else  `/pdo/private-data-objects/build/common-config.sh -e` \
		&& cd private-data-objects/ccf_transaction_processor/ \
		&& make join; fi

# Create the init script based on whether we are starting governor or adding a node
RUN touch init_ccf_node.sh && chmod a+rwx init_ccf_node.sh

# init script that needs to be run as part of entry point. Sequence depends if init is for the
# first node or a joining node. The presence of CCF_FIRST_NODE_IP indicates joining node
RUN if [ -z "$CCF_FIRST_NODE_IP" ] ; \
	then echo "dev/opt/pdo/ccf/bin/start_ccf_network.sh" > init_ccf_node.sh \
		&& echo "cp ${PDO_LEDGER_KEY_ROOT}/userccf_cert.pem /ccf_keys/" >> init_ccf_node.sh \
		&& echo "cp ${PDO_LEDGER_KEY_ROOT}/userccf_privk.pem /ccf_keys/" >> init_ccf_node.sh \
		&& echo "cp ${PDO_LEDGER_KEY_ROOT}/networkcert.pem /ccf_keys/" >> init_ccf_node.sh \
		&& echo "cp ${PDO_LEDGER_KEY_ROOT}/memberccf_cert.pem /ccf_keys/" >> init_ccf_node.sh \
		&& echo "cp ${PDO_LEDGER_KEY_ROOT}/memberccf_privk.pem /ccf_keys/" >> init_ccf_node.sh \
		&& echo "cp ${PDO_LEDGER_KEY_ROOT}/memberccf_enc_pubk.pem /ccf_keys/" >> init_ccf_node.sh \
		&& echo "cp ${PDO_LEDGER_KEY_ROOT}/memberccf_enc_privk.pem /ccf_keys/" >> init_ccf_node.sh \
		&& echo "chmod a+rw /ccf_keys/*" >> init_ccf_node.sh ; \
	else echo "cp /ccf_keys/* ${PDO_LEDGER_KEY_ROOT}/" > init_ccf_node.sh \
		&& echo "dev/opt/pdo/ccf/bin/add_node_to_ccf_network.sh" >> init_ccf_node.sh ; fi

# define the entrypoint
ENTRYPOINT `/pdo/private-data-objects/build/common-config.sh -e` \
	&& cd /pdo \
	&& . dev/opt/pdo/ccf/bin/activate \
	&& /pdo/init_ccf_node.sh \
	&& tail -f /dev/null
