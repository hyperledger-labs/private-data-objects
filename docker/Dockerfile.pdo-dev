# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# Description:
#   Builds the environment needed to build Private Data Objects.
#
#  Configuration (build) paramaters
#  - proxy configuration: https_proxy http_proxy ftp_proxy
#  - sgx mode:
#
# Build:
#   $ docker build docker -f docker/Dockerfile.pdo-dev -t pdo-dev
#   if behind a proxy, you might want to add also below options
#   --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg ftp_proxy=$ftp_proxy
#   if you want to build with different version than 16.04/xenial, add a build arg UBUNTU_VERSION, e.g., for 18.04 do --build-arg UBUNTU_VERSION=bionic
#
# Run:
#   $ cd PrivateDataObjects
#   $ docker run -v $(pwd):/project/pdo/src -it pdo-dev /bin/bash
#   (to run with SGX HW, add options '--device=/dev/isgx -v /var/run/aesmd:/var/run/aesmd ')
#   then you can build system as "usual" (e.g., make -C /project/pdo/src/__tools__/build/ DSTDIR=/project/pdo/build )
#   etc etc

ARG UBUNTU_VERSION=bionic
# 16.04 -> xenial, 17.10 -> artful, 18.04 -> bionic
# NOTE: xenial might not work anymore (see below), preferred choice is bionic ..

FROM ubuntu:${UBUNTU_VERSION}

ARG UBUNTU_VERSION=bionic
# for bizare docker reason, we have to redefine it here ...

# Add necessary packages
# TODO(xenial): we need to namnually install protobuf 3 as xenial has v2
# TODO(xenial): ocamlbuild is required by PREREQ but does not exist for xenial, so just skip for now below 
RUN apt-get update \
 && apt-get install -y -q\
    build-essential \
    ca-certificates \
    cmake \
    git \
    make \
    pkg-config \
    cmake \
    protobuf-compiler \
    libprotobuf-dev \
    python \
    python3-dev \
    python3-venv \
    python3-virtualenv \
    virtualenv \
    swig \
    software-properties-common \
    curl \
    tinyscheme \
    dh-autoreconf \
    ocaml \
    wget \
    xxd \
    unzip \
    tar \
 && if [ "$UBUNTU_VERSION" = "bionic" ] || [ "$UBUNTU_VERSION" = "artful" ]; then \
        apt-get install -y -q libsecp256k1-dev ocamlbuild; \
    fi \
 && apt-get -y -q upgrade \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# Install Tinyscheme
RUN mkdir -p /opt/tinyscheme
WORKDIR /opt/tinyscheme
RUN wget https://downloads.sourceforge.net/project/tinyscheme/tinyscheme/tinyscheme-1.41/tinyscheme-1.41.zip \
 && unzip tinyscheme-1.41.zip \
 && rm tinyscheme-1.41.zip  \
 && cd tinyscheme-1.41  \
 && make \
 && echo "TINY_SCHEME_SRC=$(pwd)" >> /etc/environment

# Install SGX SDK
RUN mkdir -p /opt/intel
WORKDIR /opt/intel
RUN wget https://download.01.org/intel-sgx/linux-2.1.2/ubuntu64-server/sgx_linux_x64_sdk_2.1.102.43402.bin \
 && chmod +x sgx_linux_x64_sdk_2.1.102.43402.bin \
 && echo "yes" | ./sgx_linux_x64_sdk_2.1.102.43402.bin \
 && rm sgx_linux_x64_sdk_2.1.102.43402.bin \
 && echo ". /opt/intel/sgxsdk/environment" >> /etc/environment

# ("Untrusted") OpenSSL
WORKDIR /tmp
RUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz \
 && tar -zxvf openssl-1.1.0h.tar.gz \
 && cd openssl-1.1.0h/ \
 && ./config \
 && THREADS=8 \
 && make -j$THREADS \
 && make test \
 && make install -j$THREADS \
 && ldconfig \
 && cd .. \
 && rm -rf openssl-1.1.0h
# Note: we do _not_ delete openssl-1.1.0h.tar.gz as we re-use it below ..


# ("trusted") SGX OpenSSL
# Note: This will compile in HW or SIM mode depending on the availability of
# /dev/isgx and /var/run/aesmd/aesm.socket
WORKDIR /tmp
RUN git clone https://github.com/intel/intel-sgx-ssl.git  \
 && . /opt/intel/sgxsdk/environment \
 && (cd intel-sgx-ssl/openssl_source; mv /tmp/openssl-1.1.0h.tar.gz . ) \
 && (cd intel-sgx-ssl/Linux; if ([ -c /dev/isgx ] && [ -S /var/run/aesmd/aesm.socket ]); then SGX_MODE=HW; else SGX_MODE=SIM; fi; make SGX_MODE=${SGX_MODE} DESTDIR=/opt/intel/sgxssl all test ) \
 && (cd intel-sgx-ssl/Linux; make install ) \
 && rm -rf /tmp/intel-sgx-ssl \
 && echo "SGX_SSL=/opt/intel/sgxssl" >> /etc/environment

# environment setup
# - make proxy persistent ..
# - make sure /etc/environment is always included for bash. Note this still doesn't make these environment variables visible to all in docker!!
RUN \
    mkdir -p /project/pdo \
 && echo "CONTRACTHOME=/project/pdo/build/opt/pdo" >> /etc/environment \
 && (if ([ -c /dev/isgx ] && [ -S /var/run/aesmd/aesm.socket ]); then SGX_MODE=HW; else SGX_MODE=SIM; fi; echo "SGX_MODE=${SGX_MODE}" >> /etc/environment ) \
 && echo "SGX_DEBUG=1" >> /etc/environment \
 && echo "PDO_ENCLAVE_PEM=/project/pdo/enclave.pem" >> /etc/environment \
 && openssl genrsa -3 3072 > /project/pdo/enclave.pem \
 && if [ ! -z "$http_proxy"  ]; then \
	echo 'Acquire::http::Proxy "'$http_proxy'";' >> /etc/apt/apt.conf.d/00proxy; \
        echo "http_proxy=$http_proxy" >> /etc/wgetrc; \
        echo "http_proxy=$http_proxy" >> /etc/environment; \
        echo "HTTP_PROXY=$(echo $http_proxy | sed 's,[a-zA-Z]*://,,')" >> /etc/environment; \
    fi \
 && if [ ! -z "$ftp_proxy"  ];  then \
	echo 'Acquire::ftp::Proxy "'$ftp_proxy'";' >> /etc/apt/apt.conf.d/00proxy; \
        echo "ftp_proxy=$ftp_proxy" >> /etc/wgetrc; \
        echo "ftp_proxy=$ftp_proxy" >> /etc/environment; \
    fi \
 && if [ ! -z "$https_proxy" ]; then \
	echo 'Acquire::https::Proxy "'$https_proxy'";' >> /etc/apt/apt.conf.d/00proxy; \
    	echo "https_proxy=$https_proxy" >> /etc/wgetrc; \
        echo "https_proxy=$https_proxy" >> /etc/environment; \
        echo "HTTPS_PROXY=$(echo $https_proxy | sed 's,[a-zA-Z]*://,,')" >> /etc/environment; \
    fi \
 && sed -i '1s;^;source /etc/environment\nexport $(grep -v "^. " /etc/environment| cut -d= -f1)\n;' /root/.bashrc

WORKDIR /project/pdo/

#ENTRYPOINT ["make -C /project/pdo/src/__tools__/build/ DSTDIR=/project/pdo/build "]
