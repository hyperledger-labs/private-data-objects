# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# Description:
#   Build Private Data Objects.
#
#  Configuration (build) paramaters
#  - proxy configuration: 		https_proxy http_proxy ftp_proxy  (default: undefined)
#  - base image with pdo dev environ: 	PDO_DEV_IMAGE (default: pdo-dev)
#    (presumably built from Dockerfile.pde-dev)

# Build:
#   $ docker build docker -f docker/Dockerfile.pdo-dev -t pdo-build
#   if behind a proxy, you might want to add also below options
#   --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg ftp_proxy=$ftp_proxy
#   if you want to build with different version than , add a build arg PDO_DEV_IMAGE e.g., --build-arg PDO_DEV_IMAGE=pdo-build-xenial
#
# Run:
#   $ cd PrivateDataObjects
#   $ docker run -it pdo-build /bin/bash
#   Notes: 
#   - this is built intrinsically in simulator mode (see below), so no point in passing SGX device
#     and daemon pipe (as possible in images built from base dev image Dockerfile.pdo-dev)
#   - if behind a proxy, you might want to add also below options
#     --env https_proxy=$https_proxy --env http_proxy=$http_proxy --env ftp_proxy=$ftp_proxy
#

ARG PDO_DEV_IMAGE=pdo-dev

FROM ${PDO_DEV_IMAGE}

WORKDIR /project/pdo/
RUN git clone https://github.com/hyperledger-labs/private-data-objects.git src

RUN . /etc/environment && export $(grep -v "^. " /etc/environment| cut -d= -f1) \
 && export SGX_MODE=SIM && echo "export SGX_MODE=SIM" >> /root/.bashrc \
 && (cd src/common/crypto/verify_ias_report; ./build_ias_certificates_cpp.sh) \
 && make -C src/__tools__/build/ DSTDIR=/project/pdo/build \
 && rm src/common/build/tests/utest.mdb
# TODO: 
# - wecannot pass driver/daemon pipe to build. So detection logic from ~/.bashrc doesn't work for build.
#   furthermore, common build (and others do automatically call test programs which fail when built in HW-mode
#   as no SGX support during build.  To handle that, not only would we have to pass a build parameter to define
#   SGX_MODE but we also would have to refactor build process. For now hardcode SIM for build _and_ subsequent run ...
# - tests create huge file which makes docker fail in building image. currently above manually
#   cleans up the file but ideally make would do that itself (or at least offer make test-clean target or alike)
