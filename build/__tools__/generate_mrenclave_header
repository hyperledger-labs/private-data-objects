#!/usr/bin/env python3

# Copyright 2023 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Generate the MRENCLAVE include file
"""

import argparse
import datetime
import re
import sys

parser = argparse.ArgumentParser(description='Script to generate the MRENCLAVE header file')
parser.add_argument('--metadata', type=str, help='Name of the file where the enclave metadata is stored', required=True)
parser.add_argument('--header', type=str, help='Name of the header file to write', required=True)
parser.add_argument('--enclave', type=str, help='Name of the enclave to use in the variable name', default='CONTRACT')

options = parser.parse_args()

# get mrenclave from metadata
pattern_start = '^metadata->enclave_css.body.enclave_hash.m:$'
pattern_end = '^metadata->'
values = []
with open(options.metadata, 'r') as f:
    for line in f :
        if re.match(pattern_start, line) :
            for line in f :
                if re.match(pattern_end, line) :
                    break
                values.extend(list(map(lambda v : v.upper()[2:], line.strip().split(' '))))
            break

def get_meta_parameter(meta_file, pattern):
    with open(meta_file, 'r') as f:
        for line in f :
            if re.match(pattern, line) :
                return line.strip().split(': ')[1]

attributes_flags = get_meta_parameter(options.metadata, '^metadata->enclave_css.body.attributes.flags:')
attribute_mask_flags = get_meta_parameter(options.metadata, '^metadata->enclave_css.body.attribute_mask.flags:')

template_fields = dict()
template_fields['mrenclave'] = ''.join(values)
template_fields['source_file'] = options.metadata
template_fields['timestamp'] = datetime.date.today().isoformat()
template_fields['enclave'] = options.enclave
template_fields['attributes_flags'] = attributes_flags
template_fields['attribute_mask_flags'] = attribute_mask_flags

with open(options.header, 'w') as f:
    f.write("""
/*
 * This file is automatically generated from {source_file} on {timestamp}
 */

#include "types.h"

HexEncodedString {enclave}_ENCLAVE_MRENCLAVE = "{mrenclave}";
uint64_t attributes_flags = {attributes_flags};
uint64_t attribute_mask_flags = {attribute_mask_flags};
""".format(**template_fields))
