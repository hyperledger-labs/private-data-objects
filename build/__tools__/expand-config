#!/usr/bin/env python

# Copyright 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Return the number of registered endpoints in the exit status
"""

import os
import sys
import toml
import re
from string import Template
import pdo.common.config as pconfig

## -----------------------------------------------------------------
try :
    ContractHome = os.environ["PDO_HOME"]
    LedgerURL = os.environ["PDO_LEDGER_URL"]
    LedgerType = os.environ["PDO_LEDGER_TYPE"]
    SPID = os.environ["PDO_SPID"]
    SPID_API_KEY = os.environ["PDO_SPID_API_KEY"]
except KeyError as ke :
    print("incomplete configuration, missing definition of {0}".format(str(ke)))
    sys.exit(-1)

#deduce eservice key format based on ledger type
if LedgerType == 'sawtooth':
    EserviceKeyFormat = 'skf'
elif LedgerType == 'ccf':
    EserviceKeyFormat = 'pem'
else:
    print("Cannot configure eservice keys. Invalid ledger type, Must be 'sawtooth' or 'ccf'" )
    sys.exit(-1)

ContractHost = os.environ.get("HOSTNAME", "localhost")
ContractEtc = os.path.join(ContractHome, "etc")
ContractKeys = os.path.join(ContractHome, "keys")
ContractLogs = os.path.join(ContractHome, "logs")
ContractData = os.path.join(ContractHome, "data")
HttpsProxy = os.environ.get("https_proxy", "")

config_map = {
    'data' : ContractData,
    'etc'  : ContractEtc,
    'home' : ContractHome,
    'host' : ContractHost,
    'keys' : ContractKeys,
    'logs' : ContractLogs,
    'ledger' : LedgerURL,
    'ledger_type': LedgerType,
    'eservice_key_format': EserviceKeyFormat,
    'proxy' : HttpsProxy,
    'spid' : SPID,
    'spid_api_key' : SPID_API_KEY
}

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def expand_single(options) :
    filename = os.path.join(options.template_directory, options.template)
    config = pconfig.parse_configuration_file(filename, config_map)

    filename = os.path.join(options.output_directory, options.file)
    with open(filename, 'w') as outfile:
        toml.dump(config, outfile)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def expand_multiple(options, n) :
    node = options.file_base + str(n)
    node_map = config_map.copy()

    node_map['identity'] = node
    node_map['_count_'] = n

    filename = os.path.join(options.template_directory, options.template)
    config = pconfig.parse_configuration_file(filename, node_map)

    filename = os.path.join(options.output_directory, node + '.toml')
    with open(filename, 'w') as outfile:
        toml.dump(config, outfile)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
import argparse

parser = argparse.ArgumentParser(description='Script to generate sawtooth configuration files from a template')

parser.add_argument('--template', help='Name of the base configuration file to use', default='template.js')
parser.add_argument('--template-directory', help='Directory in which the template configuration will be found', default='etc/templates')
parser.add_argument('--output-directory', help='Name of the directory where generated configuration files are written', default='etc')
parser.add_argument('--set', help='Specify arbitrary configuration options', nargs=2, action='append')

subparsers = parser.add_subparsers(dest='command')
expand_parser = subparsers.add_parser('single', help='expand a template into a single file')
expand_parser.add_argument('--file', help='Base for node names', required=True)

multi_parser = subparsers.add_parser('multiple', help='expand a template into multiple files')
multi_parser.add_argument('--file-base', help='Base for file names', required=True)
multi_parser.add_argument('--count', help='Number of validators to configure', default=9, type=int)

options = parser.parse_args()

if options.set :
    for (k, v) in options.set : config_map[k] = v

if options.command == 'multiple' :
    for n in range(1, int(options.count)+1) :
        expand_multiple(options, n)

elif options.command == 'single' :
    expand_single(options)
