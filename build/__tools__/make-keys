#!/usr/bin/env python

# Copyright 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--keyfile', help='name of the file to write', default='keyfile')
parser.add_argument('--format', help='format of the key to generate', choices=['skf', 'pem'])
options = parser.parse_args()

if options.format == 'skf' :
    import secp256k1
    stl_private_key = secp256k1.PrivateKey()

    private_file_name = "{0}_private.skf".format(options.keyfile)
    with open(private_file_name, "w") as pf :
        pf.write(stl_private_key.serialize())

    public_file_name = "{0}_public.skf".format(options.keyfile)
    with open(public_file_name, "w") as pf :
        pf.write(stl_private_key.pubkey.serialize().hex())

elif options.format == 'pem' :
    import pdo.common.crypto
    pem_private_key = pdo.common.crypto.SIG_PrivateKey()
    pem_private_key.Generate()
    private_file_name = "{0}_private.pem".format(options.keyfile)
    with open(private_file_name, "w") as pf :
        pf.write(pem_private_key.Serialize())

    public_file_name = "{0}_public.pem".format(options.keyfile)
    with open(public_file_name, "w") as pf :
        pf.write(pem_private_key.GetPublicKey().Serialize())
