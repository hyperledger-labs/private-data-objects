# Copyright 2019 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Note: These tests are very sensitive to changes in how we
# manage memory and must be adjusted for failure conditions
# as appropriate.

# -----------------------------------------------------------------
# TEST: size of intrinsic state
# -----------------------------------------------------------------
'(big-state 100 (value "0"))
'(big-state 110 (value "1"))
'(big-state 120 (value "2"))
'(big-state 130 (value "3"))
'(big-state 140 (value "4"))
'(big-state 150 (value "5"))
'(big-state 160 (value "6"))
'(big-state 170 (value "7"))
'(big-state 180 (value "8")),intrinsic state size exceeds maximum,fail
'(big-state 190 (value "9")),intrinsic state size exceeds maximum,fail
# run one deep recursion test to make sure the enclave is not corrupted
'(deep-recursion 1000),1000

# -----------------------------------------------------------------
# TEST: consume memory in the interpreter itself
# -----------------------------------------------------------------
'(clear-state)
'(deep-recursion 10000),10000
'(deep-recursion 15000),15000
'(deep-recursion 20000),20000
'(deep-recursion 21000),21000
'(deep-recursion 22000),excessive memory use,fail
# run one deep recursion test to make sure the enclave is not corrupted
'(deep-recursion 1000),1000

# -----------------------------------------------------------------
# TEST: test the key/value store with big values
# -----------------------------------------------------------------
# NOTE: the quotes around the string are part of the result
'(big-value 1000 (key "big-value") (value-base "b")), "b{1000}"
'(big-value 2000 (key "big-value") (value-base "b")), "b{2000}"
'(big-value 4000 (key "big-value") (value-base "b")), "b{4000}"
'(big-value 8000 (key "big-value") (value-base "b")), "b{8000}"
'(big-value 16000 (key "big-value") (value-base "b")), "b{16000}"
'(big-value 32000 (key "big-value") (value-base "b")), "b{32000}"
'(big-value 64000 (key "big-value") (value-base "b")), "b{64000}"
# run one deep recursion test to make sure the enclave is not corrupted
'(deep-recursion 1000),1000

# -----------------------------------------------------------------
# TEST: test the allocation and deallocation of slots using vectors
# -----------------------------------------------------------------
'(fill-vector (first 0) (last 99) (value 1)),100
'(dump-vector (first 0) (last 3)),\\(1 1 1 1\\)
'(fill-vector (first 0) (last 999) (value 1)),1000
'(fill-vector (first 0) (last 1999) (value 1)),2000
'(clear-vector (skip 4)),1500
'(dump-vector (first 0) (last 3)),\\(0 1 1 1\\)
'(fill-vector (first 0) (last 4999) (value 1)),5000
'(clear-vector (skip 4)),3750
'(clear-vector (skip 3)),2500
'(dump-vector (first 0) (last 3)),\\(0 1 1 0\\)
# need to avoid these for the moment... too slow for the
# timeouts for the connections to the eservice
#'(fill-vector (first 0) (last 9999) (value 1)),10000
#'(fill-vector (first 0) (last 19999) (value 1)),20000
#'(clear-vector (skip 4)),3750
#'(clear-vector (skip 3)),2500

# -----------------------------------------------------------------
# TEST: test the key/value store with many keys
# -----------------------------------------------------------------
'(many-keys 1000 (key-base "a") (value "v")), #t
'(many-keys 2000 (key-base "b") (value "v")), #t
'(many-keys 4000 (key-base "c") (value "v")), #t
'(many-keys 8000 (key-base "d") (value "v")), #t
'(many-keys 16000 (key-base "e") (value "v")), #t
'(many-keys 32000 (key-base "f") (value "v")), #t
'(many-keys 64000 (key-base "g") (value "v")), #t
'(many-keys 64000 (key-base "g") (value "n")), #t
# run one deep recursion test to make sure the enclave is not corrupted
'(deep-recursion 1000),1000
