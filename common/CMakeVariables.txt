# Copyright 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Variable for library names
# c* is for client, sgx is not required for building or using
# u* is for untrusted, untrusted handlers for enclave code
# t* is for trusted, for use inside an enclave
SET(C_CRYPTO_LIB_NAME cpdo-crypto)
SET(U_CRYPTO_LIB_NAME updo-crypto)
SET(T_CRYPTO_LIB_NAME tpdo-crypto)

SET(C_COMMON_LIB_NAME cpdo-common)
SET(U_COMMON_LIB_NAME updo-common)
SET(T_COMMON_LIB_NAME tpdo-common)

# Block store library does not depend on sgx at all
SET(BLOCK_STORE_LIB_NAME pdo-lmdb-block-store)

# include macros
LIST(APPEND COMMON_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR})
LIST(APPEND COMMON_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/state)
LIST(APPEND COMMON_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/crypto)
LIST(APPEND COMMON_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/packages/base64)
LIST(APPEND COMMON_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/packages/parson)

SET(TINYSCHEME_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/packages/tinyscheme)
SET(INTERP_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/interpreter)

SET(COMMON_CXX_FLAGS ${DEBUG_FLAGS})
LIST(APPEND COMMON_CXX_FLAGS "-m64" "-fvisibility=hidden" "-fpie" "-fPIC" "-fstack-protector" "-std=c++11" "-Wall")

################################################################################
# Configure Environment
################################################################################

SET(PDO_TOP_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../")

IF (ENV{PDO_DEBUG_BUILD})
    SET(DEBUG_FLAGS "-Og" "-g" "-DPDO_DEBUG_BUILD=1")
    MESSAGE(STATUS "Compiling in debug mode without optimizations (-Og -g)")
ELSE()
    SET(DEBUG_FLAGS "-O2" "-DPDO_DEBUG_BUILD=0")
    MESSAGE(STATUS "Compiling with optimizations (-O2). To use debug flags, set the DEBUG environment variable.")
ENDIF()

IF (BUILD_TRUSTED OR BUILD_UNTRUSTED)

  IF (NOT DEFINED ENV{SGX_SDK})
    MESSAGE(FATAL_ERROR "SGX_SDK environment variable not defined!")
  ENDIF()
  SET(SGX_SDK $ENV{SGX_SDK})

  IF (NOT DEFINED ENV{PDO_ENCLAVE_CODE_SIGN_PEM})
    MESSAGE(FATAL_ERROR "PDO_ENCLAVE_CODE_SIGN_PEM environment variable not defined!")
  ENDIF()
  SET(PDO_ENCLAVE_CODE_SIGN_PEM $ENV{PDO_ENCLAVE_CODE_SIGN_PEM})

  IF (NOT DEFINED ENV{SGX_MODE})
    MESSAGE(FATAL_ERROR "SGX_MODE environment variable not defined!($ENV{SGX_MODE})")
  ENDIF()
  SET(SGX_MODE $ENV{SGX_MODE})

  IF (${SGX_MODE} STREQUAL "SIM")
    SET(TRTS_LIBRARY_NAME "sgx_trts_sim")
    SET(URTS_LIBRARY_NAME "sgx_urts_sim")
    SET(AE_SERVICE_LIBRARY_NAME "sgx_uae_service_sim")
    SET(SERVICE_LIBRARY_NAME "sgx_tservice_sim")
  ELSE()
    SET(TRTS_LIBRARY_NAME "sgx_trts")
    SET(URTS_LIBRARY_NAME "sgx_urts")
    SET(AE_SERVICE_LIBRARY_NAME "")
    SET(SERVICE_LIBRARY_NAME "sgx_tservice")
  ENDIF()

  IF (NOT DEFINED ENV{SGX_SSL})
    MESSAGE(FATAL_ERROR "SGX_SSL environment variable not defined!")
  ENDIF()
  SET(SGX_SSL $ENV{SGX_SSL})

  SET(SGX_EDGER "${SGX_SDK}/bin/x64/sgx_edger8r")
  SET(SGX_SIGN "${SGX_SDK}/bin/x64/sgx_sign")

  SET(SGX_SEARCH_PATH "${SGX_SDK}/include:${SGX_SSL}/include")
  SET(SGX_TRUSTED_INCLUDE_DIRS
    "${SGX_SDK}/include"
    "${SGX_SDK}/include/tlibc"
    "${SGX_SDK}/include/libcxx")

  SET(SGX_UNTRUSTED_INCLUDE_DIRS
    "${SGX_SDK}/include")

ENDIF()

ENABLE_TESTING()

################################################################################
# Functions
################################################################################

FUNCTION(SGX_EDGE_TRUSTED EDL EDGE_FILES)
    GET_FILENAME_COMPONENT(EDL_BASE_NAME ${EDL} NAME_WE)
    GET_FILENAME_COMPONENT(EDL_DIR_NAME ${EDL} DIRECTORY)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

    SET (EDGE_FILES_LIST "${CMAKE_CURRENT_BINARY_DIR}/${EDL_BASE_NAME}_t.h" "${CMAKE_CURRENT_BINARY_DIR}/${EDL_BASE_NAME}_t.c")
    SET (${EDGE_FILES} ${EDGE_FILES_LIST} PARENT_SCOPE)
    ADD_CUSTOM_COMMAND( OUTPUT ${EDGE_FILES_LIST}
        COMMAND "${SGX_EDGER}" --trusted ${EDL} --search-path ${SGX_SEARCH_PATH} --search-path ${EDL_DIR_NAME}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        DEPENDS ${EDL}
    )
ENDFUNCTION()

FUNCTION(SGX_EDGE_UNTRUSTED EDL EDGE_FILES)
    GET_FILENAME_COMPONENT(EDL_BASE_NAME ${EDL} NAME_WE)
    GET_FILENAME_COMPONENT(EDL_DIR_NAME ${EDL} DIRECTORY)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

    SET (EDGE_FILES_LIST "${CMAKE_CURRENT_BINARY_DIR}/${EDL_BASE_NAME}_u.h" "${CMAKE_CURRENT_BINARY_DIR}/${EDL_BASE_NAME}_u.c")
    SET (${EDGE_FILES} ${EDGE_FILES_LIST} PARENT_SCOPE)
    ADD_CUSTOM_COMMAND( OUTPUT ${EDGE_FILES_LIST}
        COMMAND "${SGX_EDGER}" --untrusted ${EDL} --search-path ${SGX_SEARCH_PATH} --search-path ${EDL_DIR_NAME}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        DEPENDS ${EDL}
    )
ENDFUNCTION()

FUNCTION(SGX_SIGN_ENCLAVE TARGET KEY_FILE CONFIG)
    SET (ENCLAVE $<TARGET_FILE:${TARGET}>)

    SET (SIGNED_ENCLAVE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${TARGET}.signed${CMAKE_SHARED_LIBRARY_SUFFIX})
    SET (SIGNED_ENCLAVE ${SIGNED_ENCLAVE} PARENT_SCOPE)
    SET (SIGNED_ENCLAVE_METADATA ${SIGNED_ENCLAVE}".meta")
    ADD_CUSTOM_COMMAND( TARGET ${TARGET}
        POST_BUILD
        COMMAND "${SGX_SIGN}" sign -key "${KEY_FILE}" -enclave "${ENCLAVE}" -out "${SIGNED_ENCLAVE}" -dumpfile ${SIGNED_ENCLAVE_METADATA} -config "${CONFIG}" > /dev/null
    )
ENDFUNCTION()
